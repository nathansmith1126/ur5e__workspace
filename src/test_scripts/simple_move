#-------------------------
# Import Modules
#-------------------------
import rospy
import sys
import copy
import moveit_commander
from geometry_msgs.msg import PoseStamped, Pose, Vector3
from moveit_msgs.msg import Constraints, TrajectoryConstraints, PositionConstraint, BoundingVolume
from std_msgs.msg import Header
from shape_msgs.msg import SolidPrimitive

#-------------------------
# Initialize ROS & MoveIt!
#-------------------------
# Initialize moveit_commander
moveit_commander.roscpp_initialize(sys.argv)

# Initialize ROS node
rospy.init_node("ur5e_motion_node", anonymous=True)

# Instantiate RobotCommander (interface to robot)
robot = moveit_commander.RobotCommander()

# Get the first MoveGroup available
group_name = robot.get_group_names()[0]
manipulator = moveit_commander.MoveGroupCommander(group_name)

# PlanningSceneInterface for adding objects
scene = moveit_commander.PlanningSceneInterface()

# Clear any previous constraints
manipulator.clear_path_constraints()

# Add a table to the scene
#-------------------------
table_pose = PoseStamped()
table_pose.header.frame_id = robot.get_planning_frame()

# Position the table (convert inches to meters)
table_pose.pose.position.x = -(36/2 - 3.5)/39.37
table_pose.pose.position.y = 0.0
table_pose.pose.position.z = (-2)/(2*39.37)

# Table size in meters (width x length x height)
table_size = (36/39.37, 60/39.37, 2/39.37)

# Add the table to the scene
scene.add_box(name="Table", pose=table_pose, size=table_size)

#-------------------------
# manipulator move_group plan parameters
#-------------------------
manipulator.set_planning_time(15)
manipulator.set_goal_position_tolerance(0.2)       # 1 tolerance in XYZ
# manipulator.set_goal_orientation_tolerance(0.05)    # ~2.8 degrees tolerance in radians 
manipulator.set_num_planning_attempts(10)  # try 10 times
# manipulator.set_joint_tolerance(0.01)

#-------------------------
# Move Robot to a target pose
#-------------------------
# Define a simple reachable pose for UR5e

# Get current pose
current_pose = manipulator.get_current_pose().pose

current_x = current_pose.position.x
current_y = current_pose.position.y
current_z = current_pose.position.z
    
    
target_pose = Pose()
target_pose.position.x = -0.0      # meters forward from robot base
target_pose.position.y = 0.6   # centered
target_pose.position.z = 0.6   # slightly above the table surface
# target_pose.orientation.x = 0.0
# target_pose.orientation.y = 0.0
# target_pose.orientation.z = 0.0
# target_pose.orientation.w = -0.0  # neutral orientation

# Set the target pose
manipulator.set_start_state_to_current_state()
manipulator.set_pose_target(target_pose, end_effector_link = "tool0")

# check tool of interest
tool = manipulator.get_end_effector_link()

# Plan to the pose
success_bool, trajectory, time, error_code = manipulator.plan()

# Execute only if plan succeeded and has points
if success_bool and len(trajectory.joint_trajectory.points) > 0:
    manipulator.execute(trajectory, wait=True)
    print("Motion complete!")
else:
    print("No valid plan found. Check constraints or target pose.")


#-------------------------
# Clean up
#-------------------------
manipulator.clear_pose_targets()
manipulator.clear_path_constraints()
moveit_commander.roscpp_shutdown()
